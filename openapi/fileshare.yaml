openapi: "3.0.0"
info:
  version: 1.0.0
  title: File Sharing API Service
  license:
    name: MIT
servers:
  - url: http://localhost:8000/v1
paths:
  /files:
    get:
      summary: List all files
      operationId: listFiles
      tags:
        - files
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: A paged array of files
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Files"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a file object metadata
      operationId: createFile
      tags:
        - files
      requestBody:
        description: File Object Information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/File"
      responses:
        "200":
          description: Successful file object metadata creation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "creating",
                      "CreationTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "Tags": [],
                    }
        "201":
          description: Null response
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /files/{fileId}:
    get:
      summary: Retrieve specific file object metadata properties
      operationId: getFileById
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file object to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Describe file success response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "available",
                      "CreationTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "Tags": [],
                    }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a file object content and metadata properties
      operationId: deleteFileById
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file object to delete
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Delete file success response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "deleting",
                      "DeletionTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "Tags": [],
                    }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /files/{fileId}/upload:
    post:
      summary: Upload a file
      operationId: uploadFile
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file to upload
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful file upload request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "updating",
                      "UploadTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "Tags": [],
                    }
        "201":
          description: Null response
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /files/{fileId}/download:
    get:
      summary: Download a file
      operationId: downloadFile
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file to download
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          schema:
            type: string
            description: Token String to determine the authorization needed for file
      responses:
        "200":
          description: Download file success response to a valid request
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /files/{fileId}/recover:
    post:
      summary: Recovers a deleted file object content and metadata properties
      operationId: recoverFile
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file object to recover
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful recover deleted file request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "recovering",
                      "RecoverTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "Tags": [],
                    }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /files/{fileId}/share:
    get:
      summary: Generate a shareable URL for a file object
      operationId: createShareURL
      tags:
        - files
      parameters:
        - name: fileId
          in: path
          required: true
          description: The id of the file to retrieve
          schema:
            type: string
            format: uuid
        - name: expires
          in: query
          schema:
            type: string
            format: date-time
            description: Expiration date and time for file sharing URL
      responses:
        "200":
          description: Successful generate shareable URL request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
              examples:
                v1:
                  value:
                    {
                      "Status": "available",
                      "ExpirationTime": "2022-06-19T10:52:00Z",
                      "FileId": "aafb42c4-a344-45af-9701-c745d3a2b3c5",
                      "OwnerId": "7bba4642-bf32-48b8-a41b-28a3750c1c3b",
                      "ShareURL": "https://localhost:8000/v1/files/aafb42c4-a344-45af-9701-c745d3a2b3c5/download",
                      "Tags": [],
                    }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    File:
      type: object
      required:
        - FileId
      properties:
        FileId:
          type: string
          format: uuid
        Status:
          type: string
          enum:
            [
              "available",
              "creating",
              "deleted",
              "deleting",
              "error",
              "errorDeleting",
              "recovering",
              "updating",
            ]
        CreationTime:
          type: string
          format: date-time
        UploadTime:
          type: string
          format: date-time
        DeletionTime:
          type: string
          format: date-time
        RecoverTime:
          type: string
          format: date-time
        ExpirationTime:
          type: string
          format: date-time
        OwnerId:
          type: string
          format: uuid
        ShareURL:
          type: string
          format: uri
        Tags:
          type: array
          items:
            type: string
    Files:
      type: array
      items:
        $ref: "#/components/schemas/File"
    Error:
      type: object
      required:
        - code
        - error_code
        - message
      properties:
        code:
          type: integer
          format: int32
        error_code:
          type: string
          enum:
            [
              "authorization_error",
              "external_service_timeout",
              "insufficient_access",
              "insufficient_scope",
              "invalid_json_input",
              "invalid_parameters",
              "invalid_request",
              "invalid_response",
              "invalid_token",
              "io_error",
              "method_not_allowed",
              "not_found",
              "resource_already_exists",
              "resource_not_found",
              "resource_temporarily_unavailable",
              "unauthorized",
              "unexpected_error",
            ]
        message:
          type: string
